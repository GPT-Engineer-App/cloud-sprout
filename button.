import React, { useState } from "react";
import { ChakraProvider, Container, VStack, Heading, FormControl, FormLabel, Input, Button, useToast, Box, Divider } from "@chakra-ui/react";
import { FaSignInAlt, FaUserPlus, FaStethoscope } from "react-icons/fa";

const Index = () => {
  const toast = useToast();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleLogin = async () => {
    // Call the login API endpoint
    try {
      const response = await fetch("https://backengine-hz67.fly.dev/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email, password }),
      });
      const data = await response.json();

      if (response.ok) {
        toast({
          title: "Login Successful",
          description: "You have successfully logged in.",
          status: "success",
          duration: 5000,
          isClosable: true,
        });
      } else {
        toast({
          title: "Login Failed",
          description: data.error || "Something went wrong.",
          status: "error",
          duration: 5000,
          isClosable: true,
        });
      }
    } catch (error) {
      toast({
        title: "Network Error",
        description: "Please check your network connection.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    }
  };

  const handleSignup = async () => {
    // Call the signup API endpoint
    try {
      const response = await fetch("https://backengine-hz67.fly.dev/signup", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email, password }),
      });

      if (response.ok) {
        toast({
          title: "Signup Successful",
          description: "Your account has been created.",
          status: "success",
          duration: 5000,
          isClosable: true,
        });
      } else {
        const data = await response.json();
        toast({
          title: "Signup Failed",
          description: data.error || "Something went wrong.",
          status: "error",
          duration: 5000,
          isClosable: true,
        });
      }
    } catch (error) {
      toast({
        title: "Network Error",
        description: "Please check your network connection.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    }
  };

  const handleHealthCheck = async () => {
    // Call the healthcheck API endpoint
    try {
      const response = await fetch("https://backengine-hz67.fly.dev/healthcheck");
      if (response.ok) {
        toast({
          title: "Backend Health Check",
          description: "The backend is running smoothly.",
          status: "success",
          duration: 5000,
          isClosable: true,
        });
      } else {
        toast({
          title: "Backend Health Check Failed",
          description: "There might be an issue with the backend.",
          status: "warning",
          duration: 5000,
          isClosable: true,
        });
      }
    } catch (error) {
      toast({
        title: "Network Error",
        description: "Please check your network connection.",
        status: "error",
        duration: 5000,
        isClosable: true,
      });
    }
  };

  return (
    <ChakraProvider>
      <Container centerContent>
        <VStack spacing={8} marginY={12}>
          <Heading>Interactive API Frontend</Heading>

          <Box width="full">
            <Button leftIcon={<FaStethoscope />} colorScheme="green" onClick={handleHealthCheck}>
              Health Check
            </Button>
          </Box>

          <Divider />

          <FormControl id="email" isRequired>
            <FormLabel>Email address</FormLabel>
            <Input type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
          </FormControl>

          <FormControl id="password" isRequired>
            <FormLabel>Password</FormLabel>
            <Input type="password" value={password} onChange={(e) => setPassword(e.target.value)} />
          </FormControl>

          <VStack spacing={4} alignItems="stretch" width="full">
            <Button leftIcon={<FaSignInAlt />} colorScheme="blue" onClick={handleLogin}>
              Login
            </Button>
            <Button leftIcon={<FaUserPlus />} colorScheme="teal" onClick={handleSignup}>
              Signup
            </Button>
          </VStack>
        </VStack>
      </Container>
    </ChakraProvider>
  );
};

export default Index;
